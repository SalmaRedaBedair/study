15.1-1)make up in the equation 15.3
    then you will get eq 15.4
15.1-2)n=4 p1=1,p2=5,p3=8,p4=5
    q==denisity q1=1,q2=2.5,q3=2.67,q4=1.25
    q3 is the greatest so take first
    total=9 but optimal=10
15.1-3)
   int rodCutting(int n){
    memset(r,0,sizeof r);
   for(int i=1;i<=n;i++){
    for(int j=1;j<=i;j++){
        r[i]=max(r[i],r[j-1]+p[i]-c);
    }
   }
   return r[n];
}
15.1-4)
MEMOIZED-CUT-ROD(p, n)
   let r[0....n]be a new array
   for i = 0 to n
      r[i] = -inf
   return MEMOIZED-CUT-ROD-AUX(p, n, r)

MEMOIZED-CUT-ROD-AUX(p, n, r)
   if(r[n]>=0)
    return r[n]
   if(n==0)
    q=0
   else 
    q=-inf
    for(int i=1 to n)
       if(p[i]+MEMOIZED-CUT-ROD-AUX(p,n-i,r)>q)
         q=p[i]+MEMOIZED-CUT-ROD-AUX(p,n-i,r)>q
         s[n]=i;
   r[n]=q;
   return q and s;
15.1-5)vertices =>v
    v(0)=v(1)=1
    v(n)=v(n-1)+v(n-2)+1

    edges=>e
    e(0)=e(1)=0
    e(n)=2+e(n-1)+e(n-2)
15.2-1)done as the s and m tables in book
15.2-2) 
int matrixChainMultiply(int i,int j)
{
    if(i==j)return A[i];
    if(j-i==1)return A[i]*A{j}; 
    return matrixChainMultiply(i,s[i][j])*matrixChainMultiply(s[i][j],j);
}
15.2-3)
let p(k)>=c2^k
when n>1 from recurrence (15.6):
sum(1---k--->n)c2^k*c2(n-k)
sum(1---k--->n)(c^2)*2^n
    (n-1)     *(c^2)*2^n
>=2^n
15.2-4)
v=2*n-1
E=(2^(log2))*2
15.2-5)i multiply 2 at least and then multiply there result with third and so on try
(A1.....6)you will notice that
15.3-1)
recursive more efficent
numerical i will enumerating all possible ways in left side and all possible ways i right side
total time time for left multiply by time for right
recursive i will choose best from left and best from right and the multiply them only in O(1)
15.3-2)there is no overlapping
15.3-3)yes it will be solved with the same way put finding max subproblem

15.4-1)100110 using same table as Figure 15.8
15.4-2)
LCS(int i,int j){
   if(i==0||j==0) return;
   if(x[i]==y[j])
   {
       return LCS(i-1,j-1);
       print x[i];
   }
   else{
     if(c[i,j-1]>=c[i-1,j])
        return LCS(i,j-1);
     else return LCS(i-1,j);
   }
}
15.4-3)
int c[2][N];
string x,y;
int memorized_LCS_LENGTH(int n,int m){
    int shift=1;
   /*for(int i=0;i<=n;i++)
    c[i][0]=0;*/
   for(int j=0;j<=m;j++)
    c[0][j]=0,c[1][j]=0;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
                if(x[i]==y[j])
                  c[shift][j]=1+c[shift^1][j-1];
                else if(c[shift^1][j]>=c[shift][j-1])
                    c[shift][j]=c[shift^1][j];
                else c[shift][j]=c[shift][j-1];
    }
    shift^=1;
    }
    return max(c[0][m],c[1][m]);
}
void solve(){
    x="abc";
    y="bbaabc";
   cout<<memorized_LCS_LENGTH(x.size(),y.size());
}
15.4-4)same as above but handle min(n,m)
15.4-5)make another sorted list and compare it as i did above
15.5-1)
CONSTRUCT_OPTIMAL_BST(i,j,root,last){
   if i==j 
    return;
   if last==0
    print root[i,j]+"is root"
   else if root[i,j]<last
    print root[i,j]+"is the left child of"+last
   else 
    print root[i,j]+"is the right child of"+last
   CONSTRUCT_OPTIMAL_BST(root[i,j]+1,j,root,root[i,j])
   CONSTRUCT_OPTIMAL_BST(i,root[i,j]-1,root,root[i,j])
}
15.5-2)same as table in figure 15.10
15.5-3)will not affect because loop under it take the same time
